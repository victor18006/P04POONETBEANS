/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ic.uabc.juego;

/**
 *
 * @author VOM
 */

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.Border;

public class ControlBurro extends javax.swing.JFrame {
    Burro burro = new Burro();
    private int jugadoresCantidad;
    private int cartaIntercambio = 0;
    private int contadorRondas;
    private int llaveCantorBurro;
    private int turnoJugador = 0;

    /**
     * Creates new form ControlBurro
     */
    public ControlBurro() {
        initComponents();
        carta1.setEnabled(false);
        carta2.setEnabled(false);
        carta3.setEnabled(false);
        carta4.setEnabled(false);
        gritarBurro.setEnabled(false);
        numeroRonda.setEnabled(false);
        nombreJugadorTurno.setEnabled(false);
        llaveCantorBurro = 0;
        indicaciones.setEnabled(false);
        indicacionesBurro.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nombreJugadorTurno = new javax.swing.JTextField();
        numeroRonda = new javax.swing.JTextField();
        indicacionesBurro = new javax.swing.JTextField();
        indicaciones = new javax.swing.JTextField();
        iniciarJuego = new javax.swing.JButton();
        gritarBurro = new javax.swing.JButton();
        carta1 = new javax.swing.JButton();
        carta2 = new javax.swing.JButton();
        carta3 = new javax.swing.JButton();
        carta4 = new javax.swing.JButton();
        cartaUno = new javax.swing.JPanel();
        cartaDos = new javax.swing.JPanel();
        cartaTres = new javax.swing.JPanel();
        cartaCuatro = new javax.swing.JPanel();
        turno = new javax.swing.JLabel();
        ronda = new javax.swing.JLabel();
        carta = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        iniciarJuego.setText("Iniciar Juego");
        iniciarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarJuegoActionPerformed(evt);
            }
        });

        gritarBurro.setText("Gritar Â¡Burro!");
        gritarBurro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gritarBurroActionPerformed(evt);
            }
        });

        carta1.setText("1");
        carta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carta1ActionPerformed(evt);
            }
        });

        carta2.setText("2");
        carta2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carta2ActionPerformed(evt);
            }
        });

        carta3.setText("3");
        carta3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carta3ActionPerformed(evt);
            }
        });

        carta4.setText("4");
        carta4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carta4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cartaUnoLayout = new javax.swing.GroupLayout(cartaUno);
        cartaUno.setLayout(cartaUnoLayout);
        cartaUnoLayout.setHorizontalGroup(
            cartaUnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
        );
        cartaUnoLayout.setVerticalGroup(
            cartaUnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout cartaDosLayout = new javax.swing.GroupLayout(cartaDos);
        cartaDos.setLayout(cartaDosLayout);
        cartaDosLayout.setHorizontalGroup(
            cartaDosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
        );
        cartaDosLayout.setVerticalGroup(
            cartaDosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 218, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout cartaTresLayout = new javax.swing.GroupLayout(cartaTres);
        cartaTres.setLayout(cartaTresLayout);
        cartaTresLayout.setHorizontalGroup(
            cartaTresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
        );
        cartaTresLayout.setVerticalGroup(
            cartaTresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout cartaCuatroLayout = new javax.swing.GroupLayout(cartaCuatro);
        cartaCuatro.setLayout(cartaCuatroLayout);
        cartaCuatroLayout.setHorizontalGroup(
            cartaCuatroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
        );
        cartaCuatroLayout.setVerticalGroup(
            cartaCuatroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        turno.setText("Turno Jugador:");

        ronda.setText("Ronda:");

        javax.swing.GroupLayout cartaLayout = new javax.swing.GroupLayout(carta);
        carta.setLayout(cartaLayout);
        cartaLayout.setHorizontalGroup(
            cartaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
        );
        cartaLayout.setVerticalGroup(
            cartaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(298, 298, 298)
                .addComponent(indicaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(carta1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(123, 123, 123)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cartaDos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(cartaTres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gritarBurro, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cartaCuatro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(carta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(carta2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(161, 161, 161)
                                .addComponent(carta3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(165, 165, 165)
                                .addComponent(carta4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(48, 48, 48)
                                        .addComponent(turno)
                                        .addGap(27, 27, 27)
                                        .addComponent(nombreJugadorTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(cartaUno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(95, 95, 95)
                                .addComponent(ronda)
                                .addGap(52, 52, 52)
                                .addComponent(numeroRonda, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(280, 280, 280)
                                .addComponent(iniciarJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addComponent(indicacionesBurro, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(iniciarJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nombreJugadorTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numeroRonda, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(turno)
                            .addComponent(ronda))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 54, Short.MAX_VALUE)
                        .addComponent(indicacionesBurro, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(gritarBurro, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cartaDos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cartaUno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cartaTres, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cartaCuatro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(carta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carta3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carta2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carta1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carta4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(indicaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarJuegoActionPerformed
        // TODO add your handling code here:
        contadorRondas = 1;

        do {
            jugadoresCantidad = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese la cantidad de jugadores:"));
            if (jugadoresCantidad < 4 || jugadoresCantidad > 10) {
                JOptionPane.showMessageDialog(this, "Error, debe ingresar un valor entre 4 - 10", "Error", 0);
            }
        } while(jugadoresCantidad < 4 || jugadoresCantidad > 10);

        for(int i = 0; i < jugadoresCantidad; ++i) {
            String jugadorNombre = JOptionPane.showInputDialog(this, "Ingrese el nombre del jugador " + (i + 1) + ":");
            burro.preparaJugadores(jugadorNombre);
        }

        carta1.setEnabled(true);
        carta2.setEnabled(true);
        carta3.setEnabled(true);
        carta4.setEnabled(true);
        gritarBurro.setEnabled(true);
        numeroRonda.setText("" + contadorRondas);
        burro.preparaBaraja();
        burro.reparteBaraja();
        mostrarCartas();
        nombreJugadorTurno.setText("" + ((Jugador)burro.jugadores.get(turnoJugador)).getNombre());
        indicaciones.setText("Presione el nÃºmero de carta a cambiar");
        indicacionesBurro.setText("Presionar con 4 cartas mismo valor");
    }//GEN-LAST:event_iniciarJuegoActionPerformed

    private void carta2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carta2ActionPerformed
        // TODO add your handling code here:
        burro.cartasACambiar(2, turnoJugador);
        ++turnoJugador;
        if (turnoJugador == burro.jugadores.size()) {
            turnoJugador = 0;
            burro.cambioCartas();
        }

        nombreJugadorTurno.setText("" + ((Jugador)burro.jugadores.get(turnoJugador)).getNombre());
        borrarCarta();
        mostrarCartas();
    }//GEN-LAST:event_carta2ActionPerformed

    private void carta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carta1ActionPerformed
        // TODO add your handling code here:
        burro.cartasACambiar(1, turnoJugador);
        ++turnoJugador;
        if (turnoJugador == burro.jugadores.size()) {
            turnoJugador = 0;
            burro.cambioCartas();
        }

        nombreJugadorTurno.setText("" + ((Jugador)burro.jugadores.get(turnoJugador)).getNombre());
        borrarCarta();
        mostrarCartas();
    }//GEN-LAST:event_carta1ActionPerformed

    private void gritarBurroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gritarBurroActionPerformed
        // TODO add your handling code here:
        int jugadoresRestantes = burro.jugadores.size();
        int jugadorPerdedor = burro.verificarGrito(turnoJugador);
        boolean seguirJuego = burro.encuentraGanador();
        if (jugadoresRestantes > burro.jugadores.size()&&jugadorPerdedor>0) {
            --jugadorPerdedor;
        }

        ArrayList<String> manosJugadores = burro.getPilaDeManos();
        String cadenaJugador = burro.getJugadorCadena();
        if (!seguirJuego) {
            if (((Jugador)burro.jugadores.get(jugadorPerdedor)).getBurro() != "") {
                if (jugadoresRestantes == burro.jugadores.size()) {
                    String var10001 = ((Jugador)burro.jugadores.get(jugadorPerdedor)).getBurro();
                    JOptionPane.showMessageDialog(this, "Cadena al momento: \"" + var10001 + "\" del jugador " + cadenaJugador, "", 1);
                } else {
                    JOptionPane.showMessageDialog(this, "Cadena al momento: \"burro\" del jugador " + cadenaJugador, "", 1);
                    JOptionPane.showMessageDialog(this, "Jugador eliminado: " + cadenaJugador, "", 1);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Cadena al momento: \"burro\" del jugador " + cadenaJugador, "", 1);
                JOptionPane.showMessageDialog(this, "Jugador eliminado: " + cadenaJugador, "", 1);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Cadena al momento: \"burro\" del jugador " + cadenaJugador, "", 1);
        }

        burro.ronda();
        ++contadorRondas;
        numeroRonda.setText("" + contadorRondas);
        turnoJugador = 0;
        jugadoresCantidad = burro.jugadores.size();
        nombreJugadorTurno.setText("" + ((Jugador)burro.jugadores.get(turnoJugador)).getNombre());
        if (burro.jugadores.size() == 1) {
            JOptionPane.showMessageDialog(this, ((Jugador)burro.jugadores.get(0)).getNombre() + " ha ganado el juego!", "Â¡Ganador!", 1);
            carta1.setEnabled(false);
            carta2.setEnabled(false);
            carta3.setEnabled(false);
            carta4.setEnabled(false);
            gritarBurro.setEnabled(false);
            burro.jugadores.remove(0);
            indicaciones.setText("");
        }

        if (burro.jugadores.size() > 1) {
            borrarCarta();
            burro.cartasDeIntercambio.clear();
            mostrarCartas();
        }
    }//GEN-LAST:event_gritarBurroActionPerformed

    private void carta3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carta3ActionPerformed
        // TODO add your handling code here:
        burro.cartasACambiar(3, turnoJugador);
        ++turnoJugador;
        if (turnoJugador == burro.jugadores.size()) {
            turnoJugador = 0;
            burro.cambioCartas();
        }

        nombreJugadorTurno.setText("" + ((Jugador)burro.jugadores.get(turnoJugador)).getNombre());
        borrarCarta();
        mostrarCartas();
    }//GEN-LAST:event_carta3ActionPerformed

    private void carta4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carta4ActionPerformed
        // TODO add your handling code here:
        burro.cartasACambiar(4, turnoJugador);
        ++turnoJugador;
        if (turnoJugador == burro.jugadores.size()) {
            turnoJugador = 0;
            burro.cambioCartas();
        }

        nombreJugadorTurno.setText("" + ((Jugador)burro.jugadores.get(turnoJugador)).getNombre());
        borrarCarta();
        mostrarCartas();
    }//GEN-LAST:event_carta4ActionPerformed

    private JPanelImage seleccionCarta(String cartaEnMano) {
        JPanelImage mImagen = null;
        switch (cartaEnMano) {
            case "[1 Oros]" -> mImagen = new JPanelImage(carta, "/cartas/oros01.png");
            case "[2 Oros]" -> mImagen = new JPanelImage(carta, "/cartas/oros02.png");
            case "[3 Oros]" -> mImagen = new JPanelImage(carta, "/cartas/oros03.png");
            case "[4 Oros]" -> mImagen = new JPanelImage(carta, "/cartas/oros04.png");
            case "[5 Oros]" -> mImagen = new JPanelImage(carta, "/cartas/oros05.png");
            case "[6 Oros]" -> mImagen = new JPanelImage(carta, "/cartas/oros06.png");
            case "[7 Oros]" -> mImagen = new JPanelImage(carta, "/cartas/oros07.png");
            case "[8 Oros]" -> mImagen = new JPanelImage(carta, "/cartas/oros08.png");
            case "[9 Oros]" -> mImagen = new JPanelImage(carta, "/cartas/oros09.png");
            case "[10 Oros]" -> mImagen = new JPanelImage(carta, "/cartas/oros10.png");
            case "[1 Copas]" -> mImagen = new JPanelImage(carta, "/cartas/copas01.png");
            case "[2 Copas]" -> mImagen = new JPanelImage(carta, "/cartas/copas02.png");
            case "[3 Copas]" -> mImagen = new JPanelImage(carta, "/cartas/copas03.png");
            case "[4 Copas]" -> mImagen = new JPanelImage(carta, "/cartas/copas04.png");
            case "[5 Copas]" -> mImagen = new JPanelImage(carta, "/cartas/copas05.png");
            case "[6 Copas]" -> mImagen = new JPanelImage(carta, "/cartas/copas06.png");
            case "[7 Copas]" -> mImagen = new JPanelImage(carta, "/cartas/copas07.png");
            case "[8 Copas]" -> mImagen = new JPanelImage(carta, "/cartas/copas08.png");
            case "[9 Copas]" -> mImagen = new JPanelImage(carta, "/cartas/copas09.png");
            case "[10 Copas]" -> mImagen = new JPanelImage(carta, "/cartas/copas10.png");
            case "[1 Espadas]" -> mImagen = new JPanelImage(carta, "/cartas/espadas01.png");
            case "[2 Espadas]" -> mImagen = new JPanelImage(carta, "/cartas/espadas02.png");
            case "[3 Espadas]" -> mImagen = new JPanelImage(carta, "/cartas/espadas03.png");
            case "[4 Espadas]" -> mImagen = new JPanelImage(carta, "/cartas/espadas04.png");
            case "[5 Espadas]" -> mImagen = new JPanelImage(carta, "/cartas/espadas05.png");
            case "[6 Espadas]" -> mImagen = new JPanelImage(carta, "/cartas/espadas06.png");
            case "[7 Espadas]" -> mImagen = new JPanelImage(carta, "/cartas/espadas07.png");
            case "[8 Espadas]" -> mImagen = new JPanelImage(carta, "/cartas/espadas08.png");
            case "[9 Espadas]" -> mImagen = new JPanelImage(carta, "/cartas/espadas09.png");
            case "[10 Espadas]" -> mImagen = new JPanelImage(carta, "/cartas/espadas10.png");
            case "[1 Bastos]" -> mImagen = new JPanelImage(carta, "/cartas/bastos01.png");
            case "[2 Bastos]" -> mImagen = new JPanelImage(carta, "/cartas/bastos02.png");
            case "[3 Bastos]" -> mImagen = new JPanelImage(carta, "/cartas/bastos03.png");
            case "[4 Bastos]" -> mImagen = new JPanelImage(carta, "/cartas/bastos04.png");
            case "[5 Bastos]" -> mImagen = new JPanelImage(carta, "/cartas/bastos05.png");
            case "[6 Bastos]" -> mImagen = new JPanelImage(carta, "/cartas/bastos06.png");
            case "[7 Bastos]" -> mImagen = new JPanelImage(carta, "/cartas/bastos07.png");
            case "[8 Bastos]" -> mImagen = new JPanelImage(carta, "/cartas/bastos08.png");
            case "[9 Bastos]" -> mImagen = new JPanelImage(carta, "/cartas/bastos09.png");
            case "[10 Bastos]" -> mImagen = new JPanelImage(carta, "/cartas/bastos10.png");
            default -> System.out.println("Carta no vÃ¡lida: " + String.valueOf(carta));
        }

        return mImagen;
    }

    private void mostrarCartas() {
        JPanelImage mImagen1 = seleccionCarta(((Carta)((Jugador)burro.jugadores.get(turnoJugador)).getMano().getCartas().get(0)).toString());
        JPanelImage mImagen2 = seleccionCarta(((Carta)((Jugador)burro.jugadores.get(turnoJugador)).getMano().getCartas().get(1)).toString());
        JPanelImage mImagen3 = seleccionCarta(((Carta)((Jugador)burro.jugadores.get(turnoJugador)).getMano().getCartas().get(2)).toString());
        JPanelImage mImagen4 = seleccionCarta(((Carta)((Jugador)burro.jugadores.get(turnoJugador)).getMano().getCartas().get(3)).toString());
        cartaUno.add(mImagen1);
        cartaUno.revalidate();
        cartaUno.repaint();
        cartaDos.add(mImagen2);
        cartaDos.revalidate();
        cartaDos.repaint();
        cartaTres.add(mImagen3);
        cartaTres.revalidate();
        cartaTres.repaint();
        cartaCuatro.add(mImagen4);
        cartaCuatro.revalidate();
        cartaCuatro.repaint();
        cartaUno.setOpaque(false);
        cartaUno.setBorder((Border)null);
        cartaUno.setBackground(new Color(0, 0, 0, 0));
        cartaDos.setOpaque(false);
        cartaDos.setBorder((Border)null);
        cartaDos.setBackground(new Color(0, 0, 0, 0));
        cartaTres.setOpaque(false);
        cartaTres.setBorder((Border)null);
        cartaTres.setBackground(new Color(0, 0, 0, 0));
        cartaCuatro.setOpaque(false);
        cartaCuatro.setBorder((Border)null);
        cartaCuatro.setBackground(new Color(0, 0, 0, 0));
    }

    private void borrarCarta() {
        Component[] var1 = carta.getComponents();
        int var2 = var1.length;

        int var3;
        Component c;
        for(var3 = 0; var3 < var2; ++var3) {
            c = var1[var3];
            if (c instanceof JPanelImage) {
                carta.remove(c);
            }
        }

        carta.revalidate();
        carta.repaint();
        var1 = cartaUno.getComponents();
        var2 = var1.length;

        for(var3 = 0; var3 < var2; ++var3) {
            c = var1[var3];
            if (c instanceof JPanelImage) {
                cartaUno.remove(c);
            }
        }

        cartaUno.revalidate();
        cartaUno.repaint();
        var1 = cartaDos.getComponents();
        var2 = var1.length;

        for(var3 = 0; var3 < var2; ++var3) {
            c = var1[var3];
            if (c instanceof JPanelImage) {
                cartaDos.remove(c);
            }
        }

        cartaDos.revalidate();
        cartaDos.repaint();
        var1 = cartaTres.getComponents();
        var2 = var1.length;

        for(var3 = 0; var3 < var2; ++var3) {
            c = var1[var3];
            if (c instanceof JPanelImage) {
                cartaTres.remove(c);
            }
        }

        cartaTres.revalidate();
        cartaTres.repaint();
        var1 = cartaCuatro.getComponents();
        var2 = var1.length;

        for(var3 = 0; var3 < var2; ++var3) {
            c = var1[var3];
            if (c instanceof JPanelImage) {
                cartaCuatro.remove(c);
            }
        }

        cartaCuatro.revalidate();
        cartaCuatro.repaint();
    }
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlBurro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlBurro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlBurro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlBurro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlBurro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel carta;
    private javax.swing.JButton carta1;
    private javax.swing.JButton carta2;
    private javax.swing.JButton carta3;
    private javax.swing.JButton carta4;
    private javax.swing.JPanel cartaCuatro;
    private javax.swing.JPanel cartaDos;
    private javax.swing.JPanel cartaTres;
    private javax.swing.JPanel cartaUno;
    private javax.swing.JButton gritarBurro;
    private javax.swing.JTextField indicaciones;
    private javax.swing.JTextField indicacionesBurro;
    private javax.swing.JButton iniciarJuego;
    private javax.swing.JTextField nombreJugadorTurno;
    private javax.swing.JTextField numeroRonda;
    private javax.swing.JLabel ronda;
    private javax.swing.JLabel turno;
    // End of variables declaration//GEN-END:variables
}